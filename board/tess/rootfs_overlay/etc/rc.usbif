#!/bin/sh

# inspired by:
# https://github.com/ev3dev/ev3-systemd/blob/ev3dev-jessie/scripts/ev3-usb.sh
# https://gist.github.com/ianfinch/08288379b3575f360b64dee62a9f453f
# https://github.com/rundekugel/USBGadgetNetwork/blob/main/create-dual-rndis-and-cdcecm.sh

# fix udev stripping sbin from path
PATH=/usr/sbin:/sbin:/usr/bin:/bin

gadget_folder="/sys/kernel/config/usb_gadget"
g="${gadget_folder}/tess"

gadget_usb_up() {
    udc_device=$1

    usb_ver="0x0200" # USB 2.0
    dev_class="2" # Communications
    attr="0xC0" # Self powered
    pwr="0xfe" #
    cfg1="CDC"
    cfg2="RNDIS"
    ms_vendor_code="0xcd" # Microsoft
    ms_qw_sign="MSFT100" # also Microsoft (if you couldn't tell)
    ms_compat_id="RNDIS" # matches Windows RNDIS Drivers
    ms_subcompat_id="5162001" # matches Windows RNDIS 6.0 Driver
    serial="$(grep Serial /proc/cpuinfo | sed 's/Serial\s*: 9340\(\w*\)/\1/')"
    mac="$(echo ${serial} | sed 's/\(\w\w\)/:\1/g' | cut -b 2-)"
    vid="0x1d6b" # Linux Foundation
    pid="0x0104" # Multifunction composite gadget
    devversion="0x0001" # this should be incremented any time there are breaking changes
                # to this script so that the host OS sees it as a new device and
                # re-enumerates everything rather than relying on cached values
    mfg="Phyx"
    prod="Tess"

    if [ -d ${g} ]; then
        if [ "$(cat ${g}/UDC)" != "" ]; then
            echo "Gadget is already up."
            exit 1
        fi
        echo "Cleaning up old directory..."
        gadget_usb_down ${udc_device}
    fi
    printf "Setting up gadget..."

    # Create a new gadget
    mkdir ${g}
    echo "${usb_ver}" > ${g}/bcdUSB
    echo "${dev_class}" > ${g}/bDeviceClass
    echo "${vid}" > ${g}/idVendor
    echo "${pid}" > ${g}/idProduct
    echo "${devversion}" > ${g}/bcdDevice
    mkdir ${g}/strings/0x409
    echo "${mfg}" > ${g}/strings/0x409/manufacturer
    echo "${prod}" > ${g}/strings/0x409/product
    echo "${serial}" > ${g}/strings/0x409/serialnumber

    # Create 2 configurations. The first will be CDC. The second will be RNDIS.
    # Thanks to os_desc, Windows should use the second configuration.

    # config 1 is for CDC
    mkdir ${g}/configs/c.1
    echo "${attr}" > ${g}/configs/c.1/bmAttributes
    echo "${pwr}" > ${g}/configs/c.1/MaxPower
    mkdir ${g}/configs/c.1/strings/0x409
    echo "${cfg1}" > ${g}/configs/c.1/strings/0x409/configuration

    # Create the CDC function
    mkdir ${g}/functions/ecm.usb0

   # config 2 is for RNDIS
    mkdir ${g}/configs/c.2
    echo "${attr}" > ${g}/configs/c.2/bmAttributes
    echo "${pwr}" > ${g}/configs/c.2/MaxPower
    mkdir ${g}/configs/c.2/strings/0x409
    echo "${cfg2}" > ${g}/configs/c.2/strings/0x409/configuration

    # On Windows 7 and later, the RNDIS 5.1 driver would be used by default,
    # but it does not work very well. The RNDIS 6.0 driver works better. In
    # order to get this driver to load automatically, we have to use a
    # Microsoft-specific extension of USB.
    echo "1" > ${g}/os_desc/use
    echo "${ms_vendor_code}" > ${g}/os_desc/b_vendor_code
    echo "${ms_qw_sign}" > ${g}/os_desc/qw_sign

    # Create the RNDIS function, including the Microsoft-specific bits
    mkdir ${g}/functions/rndis.usb0
    echo "${ms_compat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/compatible_id
    echo "${ms_subcompat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id

    # Change the first number for each MAC address - the second digit of 2 indicates
    # that these are "locally assigned (b2=1), unicast (b1=0)" addresses. This is
    # so that they don't conflict with any existing vendors. Care should be taken
    # not to change these two bits.
    dev_mac1="02$(echo ${mac} | cut -b 3-)"
    host_mac1="12$(echo ${mac} | cut -b 3-)"
    dev_mac2="22$(echo ${mac} | cut -b 3-)"
    host_mac2="32$(echo ${mac} | cut -b 3-)"

    echo "${dev_mac1}"  > ${g}/functions/ecm.usb0/dev_addr
    echo "${host_mac1}" > ${g}/functions/ecm.usb0/host_addr
    echo "${dev_mac2}"  > ${g}/functions/rndis.usb0/dev_addr
    echo "${host_mac2}" > ${g}/functions/rndis.usb0/host_addr

    # Link everything up and bind the USB device
    ln -s ${g}/functions/ecm.usb0 ${g}/configs/c.1
    ln -s ${g}/functions/rndis.usb0 ${g}/configs/c.2
    ln -s ${g}/configs/c.2 ${g}/os_desc
    udevadm settle -t 5 || :
    echo "${udc_device}" > ${g}/UDC

    echo "Done."
}

gadget_usb_down() {
    udc_device=$1

    if [ ! -d ${g} ]; then
        echo "Gadget is already down."
        exit 1
    fi
    printf "Taking down gadget..."

    # Have to unlink and remove directories in reverse order.
    # Checks allow to finish takedown after error.
    if [ "$(cat ${g}/UDC)" != "" ]; then
        echo "" > ${g}/UDC
        udevadm settle -t 5 || :
    fi
    rm -f ${g}/os_desc/c.2
    rm -f ${g}/configs/c.2/rndis.usb0
    rm -f ${g}/configs/c.1/ecm.usb0
    [ -d ${g}/functions/ecm.usb0 ] && rmdir ${g}/functions/ecm.usb0
    [ -d ${g}/functions/rndis.usb0 ] && rmdir ${g}/functions/rndis.usb0
    [ -d ${g}/configs/c.2/strings/0x409 ] && rmdir ${g}/configs/c.2/strings/0x409
    [ -d ${g}/configs/c.2 ] && rmdir ${g}/configs/c.2
    [ -d ${g}/configs/c.1/strings/0x409 ] && rmdir ${g}/configs/c.1/strings/0x409
    [ -d ${g}/configs/c.1 ] && rmdir ${g}/configs/c.1
    [ -d ${g}/strings/0x409 ] && rmdir ${g}/strings/0x409
    rmdir ${g}

    echo "Done."
}

# Main action handling
case "$ACTION" in
  add)
  gadget_usb_up ${USB_UDC_NAME}
  #USB_UDC_NAME=${USB_UDC_NAME} ACTION=remove "$0"
  #USB_UDC_NAME=${USB_UDC_NAME} ACTION=change "$0"
  ;;
  change)
  #gadget_usb_up ${USB_UDC_NAME}
  echo "Not supported"
  ;;
  remove)
  gadget_usb_down ${USB_UDC_NAME}
  ;;
esac